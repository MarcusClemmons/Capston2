{"ast":null,"code":"import { chakra, useChakra, ThemeProvider, ColorModeContext } from '@chakra-ui/system';\nimport * as React from 'react';\nimport { runIfFn, __DEV__, objectKeys, isFunction, noop } from '@chakra-ui/utils';\nimport { useUpdateEffect, useTimeout, useLatestRef } from '@chakra-ui/hooks';\nimport { useIsPresent, motion, AnimatePresence } from 'framer-motion';\nimport { createContext } from '@chakra-ui/react-utils';\nimport { Portal } from '@chakra-ui/portal';\nimport { Alert, AlertIcon, AlertTitle, AlertDescription } from '@chakra-ui/alert';\nimport { CloseButton } from '@chakra-ui/close-button';\nimport defaultTheme from '@chakra-ui/theme';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction getToastPlacement(position, dir) {\n  var _logical$dir;\n\n  if (!position) return;\n  var logicals = {\n    \"top-start\": {\n      ltr: \"top-left\",\n      rtl: \"top-right\"\n    },\n    \"top-end\": {\n      ltr: \"top-right\",\n      rtl: \"top-left\"\n    },\n    \"bottom-start\": {\n      ltr: \"bottom-left\",\n      rtl: \"bottom-right\"\n    },\n    \"bottom-end\": {\n      ltr: \"bottom-right\",\n      rtl: \"bottom-left\"\n    }\n  };\n  var logical = logicals[position];\n  return (_logical$dir = logical == null ? void 0 : logical[dir]) != null ? _logical$dir : position;\n}\n/**\n * Given an array of toasts for a specific position.\n * It returns the toast that matches the `id` passed\n */\n\n/**\n * Given the toast manager state, finds the toast that matches\n * the id and return its position and index\n */\n\n\nfunction findToast(toasts, id) {\n  var position = getToastPosition(toasts, id);\n  var index = position ? toasts[position].findIndex(function (toast) {\n    return toast.id === id;\n  }) : -1;\n  return {\n    position: position,\n    index: index\n  };\n}\n/**\n * Given the toast manager state, finds the position of the toast that\n * matches the `id`\n */\n\n\nvar getToastPosition = function getToastPosition(toasts, id) {\n  var _Object$values$flat$f;\n\n  return (_Object$values$flat$f = Object.values(toasts).flat().find(function (toast) {\n    return toast.id === id;\n  })) == null ? void 0 : _Object$values$flat$f.position;\n};\n/**\n * Gets the styles to be applied to a toast's container\n * based on its position in the manager\n */\n\n\nfunction getToastStyle(position) {\n  var isRighty = position.includes(\"right\");\n  var isLefty = position.includes(\"left\");\n  var alignItems = \"center\";\n  if (isRighty) alignItems = \"flex-end\";\n  if (isLefty) alignItems = \"flex-start\";\n  return {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: alignItems\n  };\n}\n\nvar toastMotionVariants = {\n  initial: function initial(props) {\n    var _ref;\n\n    var position = props.position;\n    var dir = [\"top\", \"bottom\"].includes(position) ? \"y\" : \"x\";\n    var factor = [\"top-right\", \"bottom-right\"].includes(position) ? 1 : -1;\n    if (position === \"bottom\") factor = 1;\n    return _ref = {\n      opacity: 0\n    }, _ref[dir] = factor * 24, _ref;\n  },\n  animate: {\n    opacity: 1,\n    y: 0,\n    x: 0,\n    scale: 1,\n    transition: {\n      duration: 0.4,\n      ease: [0.4, 0, 0.2, 1]\n    }\n  },\n  exit: {\n    opacity: 0,\n    scale: 0.85,\n    transition: {\n      duration: 0.2,\n      ease: [0.4, 0, 1, 1]\n    }\n  }\n};\nvar ToastComponent = /*#__PURE__*/React.memo(function (props) {\n  var id = props.id,\n      message = props.message,\n      onCloseComplete = props.onCloseComplete,\n      onRequestRemove = props.onRequestRemove,\n      _props$requestClose = props.requestClose,\n      requestClose = _props$requestClose === void 0 ? false : _props$requestClose,\n      _props$position = props.position,\n      position = _props$position === void 0 ? \"bottom\" : _props$position,\n      _props$duration = props.duration,\n      duration = _props$duration === void 0 ? 5000 : _props$duration,\n      containerStyle = props.containerStyle,\n      _props$motionVariants = props.motionVariants,\n      motionVariants = _props$motionVariants === void 0 ? toastMotionVariants : _props$motionVariants,\n      _props$toastSpacing = props.toastSpacing,\n      toastSpacing = _props$toastSpacing === void 0 ? \"0.5rem\" : _props$toastSpacing;\n\n  var _React$useState = React.useState(duration),\n      delay = _React$useState[0],\n      setDelay = _React$useState[1];\n\n  var isPresent = useIsPresent();\n  useUpdateEffect(function () {\n    if (!isPresent) {\n      onCloseComplete == null ? void 0 : onCloseComplete();\n    }\n  }, [isPresent]);\n  useUpdateEffect(function () {\n    setDelay(duration);\n  }, [duration]);\n\n  var onMouseEnter = function onMouseEnter() {\n    return setDelay(null);\n  };\n\n  var onMouseLeave = function onMouseLeave() {\n    return setDelay(duration);\n  };\n\n  var close = function close() {\n    if (isPresent) onRequestRemove();\n  };\n\n  React.useEffect(function () {\n    if (isPresent && requestClose) {\n      onRequestRemove();\n    }\n  }, [isPresent, requestClose, onRequestRemove]);\n  useTimeout(close, delay);\n  var containerStyles = React.useMemo(function () {\n    return _extends({\n      pointerEvents: \"auto\",\n      maxWidth: 560,\n      minWidth: 300,\n      margin: toastSpacing\n    }, containerStyle);\n  }, [containerStyle, toastSpacing]);\n  var toastStyle = React.useMemo(function () {\n    return getToastStyle(position);\n  }, [position]);\n  return /*#__PURE__*/React.createElement(motion.li, {\n    layout: true,\n    className: \"chakra-toast\",\n    variants: motionVariants,\n    initial: \"initial\",\n    animate: \"animate\",\n    exit: \"exit\",\n    onHoverStart: onMouseEnter,\n    onHoverEnd: onMouseLeave,\n    custom: {\n      position: position\n    },\n    style: toastStyle\n  }, /*#__PURE__*/React.createElement(chakra.div, {\n    role: \"status\",\n    \"aria-atomic\": \"true\",\n    className: \"chakra-toast__inner\",\n    __css: containerStyles\n  }, runIfFn(message, {\n    id: id,\n    onClose: close\n  })));\n});\n\nif (__DEV__) {\n  ToastComponent.displayName = \"ToastComponent\";\n}\n/**\n * Static id counter to create unique ids\n * for each toast\n */\n\n\nvar counter = 0;\n\nfunction useToastProvider(defaultOptions) {\n  if (defaultOptions === void 0) {\n    defaultOptions = {};\n  }\n  /**\n   * State to track all the toast across all positions\n   */\n\n\n  var _React$useState = React.useState({\n    top: [],\n    \"top-left\": [],\n    \"top-right\": [],\n    \"bottom-left\": [],\n    bottom: [],\n    \"bottom-right\": []\n  }),\n      areas = _React$useState[0],\n      setAreas = _React$useState[1];\n  /**\n   * Compute the style of a toast based on its position\n   */\n\n\n  var getStyle = function getStyle(position) {\n    var isTopOrBottom = position === \"top\" || position === \"bottom\";\n    var margin = isTopOrBottom ? \"0 auto\" : undefined;\n    var top = position.includes(\"top\") ? \"env(safe-area-inset-top, 0px)\" : undefined;\n    var bottom = position.includes(\"bottom\") ? \"env(safe-area-inset-bottom, 0px)\" : undefined;\n    var right = !position.includes(\"left\") ? \"env(safe-area-inset-right, 0px)\" : undefined;\n    var left = !position.includes(\"right\") ? \"env(safe-area-inset-left, 0px)\" : undefined;\n    return {\n      position: \"fixed\",\n      zIndex: 5500,\n      pointerEvents: \"none\",\n      display: \"flex\",\n      flexDirection: \"column\",\n      margin: margin,\n      top: top,\n      bottom: bottom,\n      right: right,\n      left: left\n    };\n  };\n\n  var toast = React.useMemo(function () {\n    /**\n     * Function to actually create a toast and add it\n     * to state at the specified position\n     */\n    var notify = function notify(message, options) {\n      var toast = createToast(message, _extends({}, defaultOptions, options));\n      var position = toast.position,\n          id = toast.id;\n      setAreas(function (prevToasts) {\n        var _prevToasts$position, _prevToasts$position2, _extends2;\n\n        var isTop = position.includes(\"top\");\n        /**\n         * - If the toast is positioned at the top edges, the\n         * recent toast stacks on top of the other toasts.\n         *\n         * - If the toast is positioned at the bottom edges, the recent\n         * toast stacks below the other toasts.\n         */\n\n        var toasts = isTop ? [toast].concat((_prevToasts$position = prevToasts[position]) != null ? _prevToasts$position : []) : [].concat((_prevToasts$position2 = prevToasts[position]) != null ? _prevToasts$position2 : [], [toast]);\n        return _extends({}, prevToasts, (_extends2 = {}, _extends2[position] = toasts, _extends2));\n      });\n      return id;\n    };\n    /**\n     * Update a specific toast with new options based on the\n     * passed `id`\n     */\n\n\n    var update = function update(id, options) {\n      setAreas(function (prevState) {\n        var nextState = _extends({}, prevState);\n\n        var _findToast = findToast(nextState, id),\n            position = _findToast.position,\n            index = _findToast.index;\n\n        if (position && index !== -1) {\n          nextState[position][index] = _extends({}, nextState[position][index], options);\n        }\n\n        return nextState;\n      });\n    };\n    /**\n     * Close all toasts at once.\n     * If given positions, will only close those.\n     */\n\n\n    var closeAll = function closeAll(_temp) {\n      var _ref = _temp === void 0 ? {} : _temp,\n          positions = _ref.positions; // only one setState here for perf reasons\n      // instead of spamming this.closeToast\n\n\n      setAreas(function (prev) {\n        var allPositions = [\"bottom\", \"bottom-right\", \"bottom-left\", \"top\", \"top-left\", \"top-right\"];\n        var positionsToClose = positions != null ? positions : allPositions;\n        return positionsToClose.reduce(function (acc, position) {\n          acc[position] = prev[position].map(function (toast) {\n            return _extends({}, toast, {\n              requestClose: true\n            });\n          });\n          return acc;\n        }, _extends({}, prev));\n      });\n    };\n    /**\n     * Create properties for a new toast\n     */\n\n\n    var createToast = function createToast(message, options) {\n      var _options$id, _options$position;\n\n      counter += 1;\n      var id = (_options$id = options.id) != null ? _options$id : counter;\n      var position = (_options$position = options.position) != null ? _options$position : \"top\";\n      /**\n       * Delete a toast record at its position\n       */\n\n      var removeToast = function removeToast(id, position) {\n        setAreas(function (prevState) {\n          var _extends3;\n\n          return _extends({}, prevState, (_extends3 = {}, _extends3[position] = prevState[position].filter(function (toast) {\n            return toast.id != id;\n          }), _extends3));\n        });\n      };\n\n      return {\n        id: id,\n        message: message,\n        position: position,\n        duration: options.duration,\n        onCloseComplete: options.onCloseComplete,\n        onRequestRemove: function onRequestRemove() {\n          return removeToast(String(id), position);\n        },\n        status: options.status,\n        requestClose: false,\n        containerStyle: options.containerStyle\n      };\n    };\n    /**\n     * Requests to close a toast based on its id and position\n     */\n\n\n    var close = function close(id) {\n      setAreas(function (prevState) {\n        var _extends4;\n\n        var position = getToastPosition(prevState, id);\n        if (!position) return prevState;\n        return _extends({}, prevState, (_extends4 = {}, _extends4[position] = prevState[position].map(function (toast) {\n          // id may be string or number\n          // eslint-disable-next-line eqeqeq\n          if (toast.id == id) {\n            return _extends({}, toast, {\n              requestClose: true\n            });\n          }\n\n          return toast;\n        }), _extends4));\n      });\n    };\n\n    var isActive = function isActive(id) {\n      var _findToast2 = findToast(areas, id),\n          position = _findToast2.position;\n\n      return Boolean(position);\n    };\n\n    return {\n      notify: notify,\n      closeAll: closeAll,\n      close: close,\n      update: update,\n      isActive: isActive\n    };\n  }, [defaultOptions, areas]);\n  return {\n    areas: areas,\n    getStyle: getStyle,\n    toast: toast\n  };\n}\n\nvar _createContext = createContext({\n  strict: true,\n  name: \"ToastManagerContext\"\n}),\n    ToastManagerProvider = _createContext[0],\n    useToastManager = _createContext[1];\n/**\n * Manages the creation, and removal of toasts\n * across all corners (\"top\", \"bottom\", etc.)\n */\n\n\nvar ToastProvider = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var children = props.children,\n      defaultOptions = props.defaultOptions,\n      motionVariants = props.motionVariants,\n      _props$component = props.component,\n      CustomToastComponent = _props$component === void 0 ? ToastComponent : _props$component;\n\n  var _useToastProvider = useToastProvider({\n    defaultOptions: defaultOptions\n  }),\n      areas = _useToastProvider.areas,\n      getStyle = _useToastProvider.getStyle,\n      toast = _useToastProvider.toast; // attach `toast` methods to the ref of this component for `createStandaloneToast`\n\n\n  React.useImperativeHandle(ref, function () {\n    return toast;\n  });\n  var toastList = objectKeys(areas).map(function (position) {\n    var toasts = areas[position];\n    return /*#__PURE__*/React.createElement(\"ul\", {\n      role: \"region\",\n      \"aria-live\": \"polite\",\n      key: position,\n      id: \"chakra-toast-manager-\" + position,\n      style: getStyle(position)\n    }, /*#__PURE__*/React.createElement(AnimatePresence, {\n      initial: false\n    }, toasts.map(function (toast) {\n      return /*#__PURE__*/React.createElement(CustomToastComponent, _extends({\n        key: toast.id,\n        motionVariants: motionVariants\n      }, toast));\n    })));\n  });\n  return /*#__PURE__*/React.createElement(ToastManagerProvider, {\n    value: toast\n  }, children, /*#__PURE__*/React.createElement(Portal, null, toastList));\n});\n\nvar Toast = function Toast(props) {\n  var status = props.status,\n      _props$variant = props.variant,\n      variant = _props$variant === void 0 ? \"solid\" : _props$variant,\n      id = props.id,\n      title = props.title,\n      isClosable = props.isClosable,\n      onClose = props.onClose,\n      description = props.description,\n      icon = props.icon;\n  var alertTitleId = typeof id !== \"undefined\" ? \"toast-\" + id + \"-title\" : undefined;\n  return /*#__PURE__*/React.createElement(Alert, {\n    status: status,\n    variant: variant,\n    id: String(id),\n    alignItems: \"start\",\n    borderRadius: \"md\",\n    boxShadow: \"lg\",\n    paddingEnd: 8,\n    textAlign: \"start\",\n    width: \"auto\",\n    \"aria-labelledby\": alertTitleId\n  }, /*#__PURE__*/React.createElement(AlertIcon, null, icon), /*#__PURE__*/React.createElement(chakra.div, {\n    flex: \"1\",\n    maxWidth: \"100%\"\n  }, title && /*#__PURE__*/React.createElement(AlertTitle, {\n    id: alertTitleId\n  }, title), description && /*#__PURE__*/React.createElement(AlertDescription, {\n    display: \"block\"\n  }, description)), isClosable && /*#__PURE__*/React.createElement(CloseButton, {\n    size: \"sm\",\n    onClick: onClose,\n    position: \"absolute\",\n    insetEnd: 1,\n    top: 1\n  }));\n};\n\nfunction createRenderToast(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      render = _options.render,\n      _options$toastCompone = _options.toastComponent,\n      ToastComponent = _options$toastCompone === void 0 ? Toast : _options$toastCompone;\n\n  var renderToast = function renderToast(props) {\n    if (isFunction(render)) {\n      return render(props);\n    }\n\n    return /*#__PURE__*/React.createElement(ToastComponent, _extends({}, props, options));\n  };\n\n  return renderToast;\n}\n/**\n * React hook used to create a function that can be used\n * to show toasts in an application.\n */\n\n\nfunction useToast(defaultOptions) {\n  var _useChakra = useChakra(),\n      theme = _useChakra.theme;\n\n  var toastContext = useToastManager();\n  var latestToastContextRef = useLatestRef(toastContext);\n  return React.useMemo(function () {\n    var normalizeToastOptions = function normalizeToastOptions(options) {\n      return _extends({}, defaultOptions, options, {\n        position: getToastPlacement(options == null ? void 0 : options.position, theme.direction)\n      });\n    };\n\n    var toast = function toast(options) {\n      var normalizedToastOptions = normalizeToastOptions(options);\n      var Message = createRenderToast(normalizedToastOptions);\n      return latestToastContextRef.current.notify(Message, normalizedToastOptions);\n    };\n\n    toast.close = latestToastContextRef.current.close;\n    toast.closeAll = latestToastContextRef.current.closeAll;\n    /**\n     * Toasts can only be updated if they have a valid id\n     */\n\n    toast.update = function (id, options) {\n      if (!id) return;\n      var normalizedToastOptions = normalizeToastOptions(options);\n      var Message = createRenderToast(normalizedToastOptions);\n      latestToastContextRef.current.update(id, _extends({}, normalizedToastOptions, {\n        message: Message\n      }));\n    };\n\n    toast.promise = function (promise, options) {\n      var id = toast(_extends({}, options.loading, {\n        status: \"loading\",\n        duration: null\n      }));\n      promise.then(function (data) {\n        return toast.update(id, _extends({\n          status: \"success\",\n          duration: 5000\n        }, runIfFn(options.success, data)));\n      })[\"catch\"](function (error) {\n        return toast.update(id, _extends({\n          status: \"error\",\n          duration: 5000\n        }, runIfFn(options.error, error)));\n      });\n    };\n\n    toast.isActive = latestToastContextRef.current.isActive;\n    return toast;\n  }, [defaultOptions, latestToastContextRef, theme.direction]);\n}\n\nvar defaults = {\n  duration: 5000,\n  position: \"bottom\",\n  variant: \"solid\"\n};\nvar defaultStandaloneParam = {\n  theme: defaultTheme,\n  colorMode: \"light\",\n  toggleColorMode: noop,\n  setColorMode: noop,\n  defaultOptions: defaults\n};\n/**\n * Create a toast\n */\n\nfunction createStandaloneToast(_temp) {\n  var _ref$current$notify, _ref$current3, _ref$current$closeAll, _ref$current4, _ref$current$close, _ref$current5, _ref$current$isActive, _ref$current6;\n\n  var _ref = _temp === void 0 ? defaultStandaloneParam : _temp,\n      _ref$theme = _ref.theme,\n      theme = _ref$theme === void 0 ? defaultStandaloneParam.theme : _ref$theme,\n      _ref$colorMode = _ref.colorMode,\n      colorMode = _ref$colorMode === void 0 ? defaultStandaloneParam.colorMode : _ref$colorMode,\n      _ref$toggleColorMode = _ref.toggleColorMode,\n      toggleColorMode = _ref$toggleColorMode === void 0 ? defaultStandaloneParam.toggleColorMode : _ref$toggleColorMode,\n      _ref$setColorMode = _ref.setColorMode,\n      setColorMode = _ref$setColorMode === void 0 ? defaultStandaloneParam.setColorMode : _ref$setColorMode,\n      _ref$defaultOptions = _ref.defaultOptions,\n      defaultOptions = _ref$defaultOptions === void 0 ? defaultStandaloneParam.defaultOptions : _ref$defaultOptions,\n      motionVariants = _ref.motionVariants,\n      toastSpacing = _ref.toastSpacing,\n      component = _ref.component;\n\n  var ref = /*#__PURE__*/React.createRef();\n  var colorModeContextValue = {\n    colorMode: colorMode,\n    setColorMode: setColorMode,\n    toggleColorMode: toggleColorMode\n  };\n\n  var ToastContainer = function ToastContainer() {\n    return /*#__PURE__*/React.createElement(ThemeProvider, {\n      theme: theme\n    }, /*#__PURE__*/React.createElement(ColorModeContext.Provider, {\n      value: colorModeContextValue\n    }, /*#__PURE__*/React.createElement(ToastProvider, {\n      ref: ref,\n      defaultOptions: defaultOptions,\n      motionVariants: motionVariants,\n      toastSpacing: toastSpacing,\n      component: component\n    })));\n  };\n\n  var normalizeToastOptions = function normalizeToastOptions(options) {\n    return _extends({}, defaultOptions, options, {\n      position: getToastPlacement(options == null ? void 0 : options.position, theme.direction)\n    });\n  };\n\n  var toast = function toast(options) {\n    var _ref$current;\n\n    var normalizedToastOptions = normalizeToastOptions(options);\n    var Message = createRenderToast(normalizedToastOptions);\n    return (_ref$current = ref.current) == null ? void 0 : _ref$current.notify(Message, normalizedToastOptions);\n  };\n  /**\n   * Toasts can only be updated if they have a valid id\n   */\n\n\n  toast.update = function (id, options) {\n    var _ref$current2;\n\n    if (!id) return;\n    var normalizedToastOptions = normalizeToastOptions(options);\n    var Message = createRenderToast(normalizedToastOptions);\n    (_ref$current2 = ref.current) == null ? void 0 : _ref$current2.update(id, _extends({}, normalizedToastOptions, {\n      message: Message\n    }));\n  };\n\n  toast.notify = (_ref$current$notify = (_ref$current3 = ref.current) == null ? void 0 : _ref$current3.notify) != null ? _ref$current$notify : noop;\n  toast.closeAll = (_ref$current$closeAll = (_ref$current4 = ref.current) == null ? void 0 : _ref$current4.closeAll) != null ? _ref$current$closeAll : noop;\n  toast.close = (_ref$current$close = (_ref$current5 = ref.current) == null ? void 0 : _ref$current5.close) != null ? _ref$current$close : noop;\n  toast.isActive = (_ref$current$isActive = (_ref$current6 = ref.current) == null ? void 0 : _ref$current6.isActive) != null ? _ref$current$isActive : noop;\n  return {\n    ToastContainer: ToastContainer,\n    toast: toast\n  };\n}\n\nexport { Toast, ToastProvider, createRenderToast, createStandaloneToast, defaultStandaloneParam, getToastPlacement, useToast, useToastManager };","map":null,"metadata":{},"sourceType":"module"}